{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/GetGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","placeholder","GifGridItem","id","title","url","console","log","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","GifExpertApp","props","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAuCeA,EApCK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAmBvC,OACI,uBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAE5BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMlB,UACI,6BAAMD,IACN,uBACIQ,KAAK,OACLC,MAAQT,EACRU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,QAqBfG,YAAY,wB,QCNbC,EAlBK,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAI7B,OAFAC,QAAQC,IAAI,CAACJ,KAAIC,QAAOC,QAGpB,cAAC,WAAD,UACI,sBAAKG,UAAU,yCAAf,UACI,qBAAKC,IAAMJ,EAAMK,IAAMN,IACvB,4BAAKA,U,uBCZRO,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbR,EADa,iDACoCS,UAAUF,GAD9C,+DAEAG,MAAOV,GAFP,cAEbW,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,YAA6B,IAA1BjB,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,MAAOiB,EAAc,EAAdA,OACjC,MAAO,CACHlB,KACAC,QACAC,IAAG,OAAEgB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBjB,QARnB,kBAWZc,GAXY,4CAAH,sDC2BLI,EArBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,ECJN,SAAEA,GAAe,IAAD,EAEdxB,mBAAS,CAC/B8B,KAAM,GACNM,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAkBxC,OAXAC,qBAAU,WAENhB,EAAQC,GAAUgB,MAAM,SAAAC,GACpBH,EAAS,CACLR,KAAMW,EACNL,SAAS,SAIlB,CAACZ,IAEGa,EDZ2BK,CAAalB,GAAjCS,EAFgB,EAEtBH,KAAcM,EAFQ,EAERA,QAEtB,OACI,eAAC,WAAD,WACA,oBAAIhB,UAAU,oCAAd,SAAoDI,IAClDY,GAAW,mBAAGhB,UAAU,mCAAb,wBACb,qBAAKA,UAAU,YAAf,SACMa,EAAOD,KAAI,SAACW,GACV,OAAO,cAAC,EAAD,eAAiCA,GAAdA,EAAI5B,aEoB/B6B,EA/BM,SAAAC,GAAU,IAAD,EAEU7C,mBAAS,CAAC,SAFpB,mBAEnB8C,EAFmB,KAEP/C,EAFO,KAW1B,OACI,eAAC,WAAD,WACI,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BACM+C,EAAWd,KAAI,SAAAR,GAGb,OAAO,cAAC,EAAD,CAA0BA,SAAWA,GAAtBA,Y,MCpB1CuB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.bf0a70de.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2) {\n            // cats es el estado anterior\n            setCategories(cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <h1>{ inputValue }</h1>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n                placeholder=\"Nueva categoria\"\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory\n","\n\nimport React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\n\nconst GifGridItem = ({id, title, url}) => {\n\n    console.log({id, title, url})\n\n    return (\n        <Fragment>\n            <div className=\"card animate__animated animate__fadeIn\">\n                <img src={ url } alt={ title }></img>\n                <p>{ title }</p>\n            </div>\n        </Fragment>\n    )\n}\n\nGifGridItem.propTypes = {\n\n}\n\nexport default GifGridItem\n","\nexport const getGifs = async ( category ) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=d3fbKi7Gvbl4Vyy9E1IoIZaIqGugn4PE`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    const gifs = data.map( ({ id, title, images  }) => {\n        return {\n            id,\n            title,\n            url: images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}\n\n","\n\nimport React, { Fragment } from 'react'\nimport PropTypes from 'prop-types'\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <Fragment>\n        <h3 className=\"animate__animated animate__fadeIn\">{ category }</h3>\n        { loading && <p className=\"animate__animated animate__flash\">Loading...</p> }\n        <div className=\"card-grid\">\n            { images.map((img) => {\n                return <GifGridItem key={ img.id } { ...img } />\n            })}\n        </div>\n        </Fragment>\n    )\n}\n\nGifGrid.propTypes = {\n\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from '../helpers/GetGifs'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n\n        getGifs(category).then( imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            });\n        });\n\n    }, [category]);\n\n    return state; // { data: [], loading: true };\n}","import React, { Fragment, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = props => {\n\n    const [categories, setCategories] = useState(['Cats']);\n\n    // const handleAdd = () => {\n    //     setCategories(['Nueva Categoria', ...categories]);\n\n            // cats es el estado anterior\n    //     // setCategories( cats => [ 'Nueva Categoria', ...cats]);\n    // }\n\n    return (\n        <Fragment>\n            <h2>GifExpertApp</h2>\n            <AddCategory setCategories={ setCategories } />\n            <hr />\n            <ol>\n                { categories.map(category => {\n                    // key cuando se muestran etiquetas dinamicamente por medio de iterables, es obligatorio usar el key, y este debe ser unico.\n                    // esto para optimizar y solo renderizar lo que ha cambiado\n                    return <GifGrid key={ category } category={ category } />\n                })}\n            </ol>\n        </Fragment>\n    )\n}\n\nGifExpertApp.propTypes = {\n\n}\n\nexport default GifExpertApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\nimport 'animate.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}